#include "nwnx"

const string NWNX_SQL = "NWNX_SQL";

// Prepares the provided query for execution. Does not execute it! Clears any previous state.
// Returns TRUE if the query was successfully prepared.
int NWNX_SQL_PrepareQuery(string query);

// Executes a query which has been prepared.
// Returns the ID of this query if successful, else FALSE.
int NWNX_SQL_ExecutePreparedQuery();

// Directly execute an SQL query. Clears previously prepared query states.
// Returns the ID of this query if successful, else FALSE.
int NWNX_SQL_ExecuteQuery(string query);

// Returns TRUE if one or more rows are ready, FALSE otherwise.
int NWNX_SQL_ReadyToReadNextRow();

// Reads the next row of returned data.
// Should only be called after a successsful call to NWNX_SQL_ReadyToReadNextRow().
void NWNX_SQL_ReadNextRow();

// Returns data at the nth (0-based) column of the active row.
// NWNX_SQL_ReadNextRow should be called before this.
string NWNX_SQL_ReadDataInActiveRow(int column = 0);

// Set the int value of a prepared statement at given position
void NWNX_SQL_PreparedInt(int position, int value);
// Set the string value of a prepared statement at given position
void NWNX_SQL_PreparedString(int position, string value);
// Set the float value of a prepared statement at given position
void NWNX_SQL_PreparedFloat(int position, float value);
// Set the objectID value of a prepared statement at given position
void NWNX_SQL_PreparedObjectId(int position, object value);
// Set the full serialized object value of a prepared statement at given position
void NWNX_SQL_PreparedObjectFull(int position, object value);

// Like NWNX_SQL_ReadDataInActiveRow, but for full serialized objects.
// The object will be deserialized and created in the game. New object ID is returned.
// The exact behavior depends on type of deserialized object and owner object:
//    - If object is an item, and owner if placeable, creature or container, the item will be created in its inventory
//    - If owner is an area, the object will be created on the ground at Vector(x,y,z)
//    - Otherwise, the object will be created outside the world and needs to be ported manually.
object NWNX_SQL_ReadFullObjectInActiveRow(int column = 0, object owner = OBJECT_INVALID, float x = 0.0, float y = 0.0, float z = 0.0);

// Return number of rows affected by SQL statement (for non-row-based statements like INSERT, UPDATE, DELETE, etc.);
// Returns -1 if the query was not non-row-based.
int NWNX_SQL_GetAffectedRows();

// Return the database type we're interacting with (same value as the value of NWNX_SQL_TYPE environment var)
string NWNX_SQL_GetDatabaseType();

// Free any resources attached to an existing prepared query.
// Resources are automatically freed when a new query is prepared, so calling this isn't necessary.
void NWNX_SQL_DestroyPreparedQuery();

// Returns the last error message generated by the database.
string NWNX_SQL_GetLastError();

// Returns the number of parameters expected by the prepared query.
// Returns -1 if no query is prepared.
int NWNX_SQL_GetPreparedQueryParamCount();


int NWNX_SQL_PrepareQuery(string query)
{
    string sFunc = "PREPARE_QUERY";

    NWNX_PushArgumentString(NWNX_SQL, sFunc, query);
    NWNX_CallFunction(NWNX_SQL, sFunc);
    return NWNX_GetReturnValueInt(NWNX_SQL, sFunc);
}

int NWNX_SQL_ExecutePreparedQuery()
{
    string sFunc = "EXECUTE_PREPARED_QUERY";

    NWNX_CallFunction(NWNX_SQL, sFunc);
    return NWNX_GetReturnValueInt(NWNX_SQL, sFunc);
}

int NWNX_SQL_ExecuteQuery(string query)
{
    // Note: the implementation might change as support for more SQL targets arrives.
    if (NWNX_SQL_PrepareQuery(query))
    {
        int ret = NWNX_SQL_ExecutePreparedQuery();
        NWNX_SQL_DestroyPreparedQuery();
        return ret;
    }

    return FALSE;
}

int NWNX_SQL_ReadyToReadNextRow()
{
    string sFunc = "READY_TO_READ_NEXT_ROW";

    NWNX_CallFunction(NWNX_SQL, sFunc);
    return NWNX_GetReturnValueInt(NWNX_SQL, sFunc);
}

void NWNX_SQL_ReadNextRow()
{
    string sFunc = "READ_NEXT_ROW";

    NWNX_CallFunction(NWNX_SQL, sFunc);
}

string NWNX_SQL_ReadDataInActiveRow(int column = 0)
{
    string sFunc = "READ_DATA_IN_ACTIVE_ROW";

    NWNX_PushArgumentInt(NWNX_SQL, sFunc, column);
    NWNX_CallFunction(NWNX_SQL, sFunc);
    return NWNX_GetReturnValueString(NWNX_SQL, sFunc);
}


void NWNX_SQL_PreparedInt(int position, int value)
{
    string sFunc = "PREPARED_INT";

    NWNX_PushArgumentInt(NWNX_SQL, sFunc, value);
    NWNX_PushArgumentInt(NWNX_SQL, sFunc, position);
    NWNX_CallFunction(NWNX_SQL, sFunc);
}
void NWNX_SQL_PreparedString(int position, string value)
{
    string sFunc = "PREPARED_STRING";

    NWNX_PushArgumentString(NWNX_SQL, sFunc, value);
    NWNX_PushArgumentInt(NWNX_SQL, sFunc, position);
    NWNX_CallFunction(NWNX_SQL, sFunc);

}
void NWNX_SQL_PreparedFloat(int position, float value)
{
    string sFunc = "PREPARED_FLOAT";

    NWNX_PushArgumentFloat(NWNX_SQL, sFunc, value);
    NWNX_PushArgumentInt(NWNX_SQL, sFunc, position);
    NWNX_CallFunction(NWNX_SQL, sFunc);

}
void NWNX_SQL_PreparedObjectId(int position, object value)
{
    string sFunc = "PREPARED_OBJECT_ID";

    NWNX_PushArgumentObject(NWNX_SQL, sFunc, value);
    NWNX_PushArgumentInt(NWNX_SQL, sFunc, position);
    NWNX_CallFunction(NWNX_SQL, sFunc);

}
void NWNX_SQL_PreparedObjectFull(int position, object value)
{
    string sFunc = "PREPARED_OBJECT_FULL";

    NWNX_PushArgumentObject(NWNX_SQL, sFunc, value);
    NWNX_PushArgumentInt(NWNX_SQL, sFunc, position);
    NWNX_CallFunction(NWNX_SQL, sFunc);
}

object NWNX_SQL_ReadFullObjectInActiveRow(int column = 0, object owner = OBJECT_INVALID, float x = 0.0, float y = 0.0, float z = 0.0)
{
    string sFunc = "READ_FULL_OBJECT_IN_ACTIVE_ROW";

    NWNX_PushArgumentFloat(NWNX_SQL, sFunc, z);
    NWNX_PushArgumentFloat(NWNX_SQL, sFunc, y);
    NWNX_PushArgumentFloat(NWNX_SQL, sFunc, x);
    NWNX_PushArgumentObject(NWNX_SQL, sFunc, owner);
    NWNX_PushArgumentInt(NWNX_SQL, sFunc, column);
    NWNX_CallFunction(NWNX_SQL, sFunc);
    return NWNX_GetReturnValueObject(NWNX_SQL, sFunc);
}

int NWNX_SQL_GetAffectedRows()
{
    string sFunc = "GET_AFFECTED_ROWS";

    NWNX_CallFunction(NWNX_SQL, sFunc);
    return NWNX_GetReturnValueInt(NWNX_SQL, sFunc);
}

string NWNX_SQL_GetDatabaseType()
{
    string sFunc = "GET_DATABASE_TYPE";

    NWNX_CallFunction(NWNX_SQL, sFunc);
    return NWNX_GetReturnValueString(NWNX_SQL, sFunc);
}

void NWNX_SQL_DestroyPreparedQuery()
{
    string sFunc = "DESTROY_PREPARED_QUERY";

    NWNX_CallFunction(NWNX_SQL, sFunc);
}

string NWNX_SQL_GetLastError()
{
    string sFunc = "GET_LAST_ERROR";

    NWNX_CallFunction(NWNX_SQL, sFunc);
    return NWNX_GetReturnValueString(NWNX_SQL, sFunc);
}

int NWNX_SQL_GetPreparedQueryParamCount()
{
    string sFunc = "GET_PREPARED_QUERY_PARAM_COUNT";

    NWNX_CallFunction(NWNX_SQL, sFunc);
    return NWNX_GetReturnValueInt(NWNX_SQL, sFunc);
}
